generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email String @unique
  hash  String

  role Role @default(USER)

  refreshToken String?

  firstName   String
  lastName    String?
  totalPoints Int     @default(0)

  trips       Trip[]
  redemptions Redemption[]
}

model Trip {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId

  distance       Float
  averageSpeed   Float
  harshBrakes    Int
  overspeedCount Int
  safetyScore    Float
  // totalTime      Float

  pointsEarned Int
  createdAt    DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Reward {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  description    String?
  pointsRequired Int
  stock          Int      @default(0)
  createdAt      DateTime @default(now())

  redemptions Redemption[]
}

model Redemption {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  userId      String           @db.ObjectId
  rewardId    String           @db.ObjectId
  adminId     String?          @db.ObjectId
  status      RedemptionStatus @default(PENDING)
  requestedAt DateTime         @default(now())
  approvedAt  DateTime?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  reward Reward @relation(fields: [rewardId], references: [id], onDelete: Cascade)
}

enum RedemptionStatus {
  PENDING
  APPROVED
  REJECTED
}

enum Role {
  USER
  ADMIN
}
